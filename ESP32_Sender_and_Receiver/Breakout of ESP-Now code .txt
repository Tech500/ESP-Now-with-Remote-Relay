Breakout of ESP-Now code for Board 2; from "ESP32_Sender_and_Receiver.ino"
 

#include <esp_now.h>

//MAC Address of that receives incoming relay status
uint8_t broadcastAddress[] = {0x30, 0xAE, 0xA4, 0xDF, 0xB3, 0x6C};   //Adafruit Dev Broad  --board #3

//Structure to send data
//Must match the receiver structure
typedef struct struct_message2 {
    int batteryRelay;
} struct_message2;

// Create a struct_message called BME280Readings to hold sensor readings
struct_message2 incomingReadings2;

//store relay status --sketch
int relay;

//incomingReadings2 relay status
int incomingRelay;

esp_now_peer_info_t peerInfo;

// callback when data is sent
void OnDataSent(const uint8_t *mac_addr, esp_now_send_status_t status) {
  Serial.print("\r\nLast Packet Send Status:\t");
  Serial.println(status == ESP_NOW_SEND_SUCCESS ? "Delivery Success" : "Delivery Fail");
}

void setup(void)
{

  Serial.begin(9600);

  WiFi.persistent( false ); // for time saving

  // Connecting to local WiFi network
  Serial.println();
  Serial.print("Connecting to ");
  Serial.println(ssid);
  WiFi.mode(WIFI_AP_STA);
  WiFi.config(ip, gateway, subnet, dns);
  WiFi.begin(ssid, password);
  delay(10);
  while (WiFi.status() != WL_CONNECTED)
  {
    Serial.print(".");
    delay(1000);
  }

  Serial.println("");
  Serial.println("WiFi connected");
  Serial.print("MAC: ");
  Serial.println(WiFi.macAddress());
  Serial.print("Server IP:  ");
  Serial.println(WiFi.localIP());
  Serial.println("");

  WiFi.disconnect(true);

  Serial.print("WiFi SSID Disconnected:  ");
  Serial.println(ssid);
  Serial.println("");

  WiFi.mode(WIFI_OFF);

  // Init ESP-NOW
  if (esp_now_init() != ESP_OK) {
    Serial.println("Error initializing ESP-NOW");
    return;
  }

  // Once ESPNow is successfully Init, we will register for Send CB to
  // get the status of Trasnmitted packet
  esp_now_register_send_cb(OnDataSent);
  
  // Register peer
  memcpy(peerInfo.peer_addr, broadcastAddress, 6);
  peerInfo.channel = CHAN_AP;  
  peerInfo.encrypt = false;

  // Register peer
  memcpy(peerInfo.peer_addr, broadcastAddress, 6);
  peerInfo.channel = CHAN_AP;  
  peerInfo.encrypt = false;
  
  // Add peer        
  if (esp_now_add_peer(&peerInfo) != ESP_OK){
    Serial.println("Failed to add peer");
    return;
  }
  
  // Once ESPNow is successfully Init, we will register for recv CB to
  // get recv packer info
  esp_now_register_recv_cb(OnDataRecv);  //Used receiving data from board
  
	//Not all Ayscnwebserver code.... only RSTP GET request

  serverAsync.on("/RTSP", HTTP_GET, [](AsyncWebServerRequest * request)  //Camera View menu option
  {
    PATH = "/RTSP";
    accessLog();
    relayOn();  //Switch relay ON
    onceTicker.once_ms(120000, relayOff);  //Function relayOff sends ESP-Now message to turn relay OFF
    if (! flag == 1)
    {
      
      request->send_P(200, PSTR("text/html"), HTML7, processor7);   //HTML7 is index7.h web page, processor7 is a function
      
    }

    end();

}  

  Void loop(){
  
	//Nothing added for ESP-now
	
	//rest of loop code
	
}


void relayOn()   //"Camera View" main menu option (RSTP GET request)
{
  
  relay = 1;

  struct_message2 incomingReadings2;
  incomingReadings2.batteryRelay = relay;

  // Send message via ESP-NOW  //Sends to board #3
  esp_err_t result = esp_now_send(broadcastAddress, (uint8_t *) &incomingReadings2, sizeof(incomingReadings2));

  if (result == ESP_OK) {
    Serial.println("Sent with success");
  }
  else {
    Serial.println("Error sending the data");

  } 

}


//Ticker library instance --function relayOff only runs once after 2 minutes elapse.
onceTicker.once_ms(120000, relayOff);  //Function relayOff sends ESP-Now message to turn relay OFF

void relayOff()
{
  
  relay = 0;

  struct_message2 incomingReadings2;
  incomingReadings2.batteryRelay = relay;

  // Send message via ESP-NOW
  esp_err_t result = esp_now_send(broadcastAddress, (uint8_t *) &incomingReadings2, sizeof(incomingReadings2));

  if (result == ESP_OK) {
    Serial.println("Sent with success");
  }
  else {
    Serial.println("Error sending the data");
  
  } 

}




